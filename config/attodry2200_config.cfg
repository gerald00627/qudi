global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

    extensions:
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH IF NECESSARY
        - ''

hardware:
    
    spm:
        module.Class: 'spm.spm_asc500.SPM_ASC500'
        sync_in_timeout:  0 # in ms

    aps_magnet:
        module.Class: 'magnet.APS_magnet.APSMagnet'
        magnet_address_zx: 'COM5'
        magnet_address_y: 'COM6'

        magnet_x_constr: 0.25 # in Tesla
        magnet_y_constr: 0.25 # in Tesla
        magnet_z_constr: 0.25 # in Tesla
        magnet_rho_constr: 0.25  # in Tesla 

    mw_source_smb100B:
        module.Class: 'microwave.mw_source_smb100B.MicrowaveSMB100B'
        tcpip_address: 'TCPIP0::132.239.27.238::inst0::INSTR'
        tcpip_timeout: 20

    mw_source_srssg:
        module.Class: 'microwave.mw_source_srssg.MicrowaveSRSSG'
        gpib_address: 'GPIB0::27::INSTR'
        gpib_timeout: 10
    
    time_tagger:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1

        pixelclock_click_chn: 1
        pixelclock_begin_chn: 2
        pixelclock_end_chn: 3

        _channel_detect: 2
        _channel_next: 2
        _channel_sync: 4
        _channel_next_MW_trig: 5
    
    fastcounter_time_tagger:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 1
        timetagger_channel_detect: 2
        timetagger_channel_next: 2
        timetagger_channel_sync: 4

        timetagger_sum_channels: False

    timetagger_slowcounter:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1

    timetagger_testODMR:
        module.Class: 'timetagger_counter_V1_Hanyi.TimeTaggerCounter'
        timetagger_channel_apd_0: 1

    # smiq:
    #     module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
    #     gpib_address: 'GPIB0::25::INSTR'
    #     gpib_timeout: 20 # in seconds
    #     frequency_min: 300e3  # optional, in Hz
    #     frequency_max: 3.3e9  # optional, in Hz
    #     power_min: -100  # optional, in dBm
    #     power_max: 0  # optional, in dBm

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        pulsestreamer_ip: '172.16.27.233'
        laser_channel: 0
        mw2_switch: 1   
        mw1_switch: 2
        mw_trig: 3
        pixel_start: 5
        pixel_stop: 6
        sync_in: 7
        use_external_clock: False
        external_clock_option: 0
        camera_trig: 4

    cameraBasler:
        module.Class: 'camera.basler.Basler_camera.CameraBasler'
        camera_ID : 'acA1920-155um'
        camera_Index: '0'
        input_line: 'Line4'
        output_line: 'Line3'
        pixel_format: 'Mono12'
        support_live: True
        image_size: (1936,1216)
        image_offset: (602,812) 
        plot_pixel: (100,100)
        trigger_mode: False
        exposure_mode: 'Timed'
        exposure: 10e-3

    #temporarily have a slowcounter cameraBasler before implentation in camera gui script
    cameraBasler_slowcounter:
        module.Class: 'camera.basler.Basler_camera_slowcounter.CameraBasler'
        camera_ID : 'acA1920-155um'
        camera_Index: '0'
        input_line: 'Line4'
        output_line: 'Line3'
        pixel_format: 'Mono12'
        support_live: True
        image_size: (1936,1216)
        image_offset: (0,0) 
        plot_pixel: (100,1000)
        trigger_mode: False
        exposure_mode: 'Timed'
        exposure: 200e-6

    # cameraBasler_fast_counter:
    #     module.Class: 'camera.basler.Basler_camera_fast_counter.CameraBasler_FastCounter'
    #     camera_ID : 'acA1920-155um'
    #     camera_Index: '0'
    #     image_Format: 'Mono12p'
    #     input_line: 'Line4'
    #     output_line: 'Line3'
    #     pixel_format: 'Mono12'
    #     exposure: 10000
    #     num_images: 100

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    mydummyspm:
        module.Class: 'spm.spm_dummy.SPMDummy'
        libpath: 'C:\\Data\\AttoDRY_Data'

    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy' 

logic:

    afm_scanner_logic:
        module.Class: 'afm_confocal_logic.AFMConfocalLogic'
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH
        meas_path: 'C:\\Data\\AttoDRY_Data'
        connect:
            spm_device: 'spm'
            savelogic: 'savelogic'
            counter_device: 'time_tagger'
            counter_logic: 'counterlogic'
            fitlogic: 'fitlogic'
            pulser: 'pulsestreamer'
            microwave: 'mw_source_smb100B' 
            pulsed_master: 'pulsedmasterlogic'

    # odmr_slowcounter_microwave_interfuse:
    #     module.Class: 'interfuse.odmr_slowcounter_microwave_interfuse.ODMRSlowCounterMicrowaveInterfuse'
    #     connect:          
    #         slowcounter: 'time_tagger'
    #         microwave: 'mw_source_smb100B'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'time_tagger'
            savelogic: 'savelogic'

    odmr_counter_pulser_interfuse:
        module.Class: 'interfuse.odmr_counter_pulser_interfuse.ODMRCounterInterfuse'
        connect:
            slowcounter: 'time_tagger'
            pulser: 'pulsestreamer'
            microwave1: 'mw_source_smb100B' # Not used

    odmr_counter_pulser_MW_trig_interfuse: 
        module.Class: 'interfuse.odmr_counter_pulser_MW_trig_interfuse.ODMRCounterMWTrigInterfuse'
        connect:
            slowcounter: 'time_tagger'
            pulser: 'pulsestreamer'
            microwave1: 'mw_source_smb100B'

    # odmrlogic: # for CW ODMR
    #     module.Class: 'odmr_logic.ODMRLogic'
    #     connect:
    #         odmrcounter: 'odmr_counter_pulser_interfuse'
    #         fitlogic: 'fitlogic'
    #         microwave1: 'mw_source_smb100B'
    #         savelogic: 'savelogic'
    #         taskrunner: 'tasklogic'
    #     scanmode: 'LIST'
    #     mw_trigger_mode : 'STEP_EXT' # [AUTO, SINGLE_EXT, STEP_EXT,START_STOP_EXT, MANUAL]
    #     # clock_frequency: 150

    # odmrlogic: # for pulsed ODMR
    #     module.Class: 'odmr_logic.ODMRLogic'
    #     connect:
    #         odmrcounter: 'odmr_counter_pulser_MW_trig_interfuse'
    #         fitlogic: 'fitlogic'
    #         microwave1: 'mw_source_smb100B'
    #         savelogic: 'savelogic'
    #         taskrunner: 'tasklogic'
    #     scanmode: 'SWEEP' 
    #     mw_trigger_mode : 'AUTO' # [AUTO, SINGLE_EXT, SINGLE, STEP_EXT,START_STOP_EXT, MANUAL]
    #     # clock_frequency: 150

    odmrlogic: # for WF ODMR
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_pulser_MW_Basler_v2_interfuse' 
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_pulser_MW_Basler_v2_interfuse' 
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'
        mw_trigger_mode : 'SINGLE' # for triggering camera using MW output
        # mw_trigger_mode : 'STEP_EXT' # for triggering MW using camera output
        clock_frequency: 150

    # odmrlogic: # for WF PULSED ODMR
    #     module.Class: 'odmr_logic.ODMRLogic'
    #     connect:
    #         odmrcounter: 'pulsed_odmr_counter_pulser_MW_Basler_interfuse' 
    #         fitlogic: 'fitlogic'
    #         microwave1: 'pulsed_odmr_counter_pulser_MW_Basler_interfuse' 
    #         savelogic: 'savelogic'
    #         taskrunner: 'tasklogic'
    #     scanmode: 'LIST'
    #     mw_trigger_mode : 'SINGLE' # for triggering camera using MW output
    #     # mw_trigger_mode : 'STEP_EXT' # for triggering MW using camera output
    #     clock_frequency: 150

    odmr_counter_pulser_MW_Basler_v2_interfuse:  # for WF ODMR, with MW trigger camera
        module.Class: 'interfuse.odmr_counter_pulser_MW_Basler_v2_interfuse.ODMRCounter_MW_Basler_Interfuse'
        connect:          
            slowcounter: 'cameraBasler_slowcounter'
            pulser: 'pulsestreamer'
            microwave1: 'mw_source_smb100B'
        savepath: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Widefield_data'

    pulsed_odmr_counter_pulser_MW_Basler_interfuse:  # for WF pulsed ODMR, with MW trigger camera
        module.Class: 'interfuse.pulsed_odmr_counter_pulser_MW_Basler_interfuse.pulsedODMRCounter_MW_Basler_Interfuse'
        connect:          
            slowcounter: 'cameraBasler_slowcounter'
            pulser: 'pulsestreamer'
            microwave1: 'mw_source_smb100B'
        savepath: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Widefield_data'


    odmr_counter_pulser_MW_Basler_interfuse:  # for WF pulsed experiments
        module.Class: 'interfuse.odmr_counter_pulser_MW_Basler_interfuse.ODMRCounter_MW_Basler_Interfuse'
        connect:          
            slowcounter: 'cameraBasler_slowcounter'
            pulser: 'pulsestreamer'
            microwave1: 'mw_source_smb100B'
        savepath: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Widefield_data' 

    odmr_counter_microwave_interfuse_Basler: # for WF without pulser
        module.Class: 'interfuse.odmr_counter_microwave_interfuse_Basler.ODMRCounterMicrowaveInterfuse_Basler'
        connect:          
            slowcounter: 'cameraBasler_slowcounter'
            microwave1: 'mw_source_smb100B'
        savepath: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Widefield_data' 


    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH
        # win_data_directory: 'C:\\Data\\Qudi_Data'
        win_data_directory: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Qudi_Data'
        log_into_daily_directory: True
        savepath: 'C:/Users/cduPC/Documents/Measurement_Data/QUDI/Widefield_data/'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'mydummyscanner'
            fitlogic: 'fitlogic'


    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'pulsestreamer'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'fastcounter_time_tagger'
            # fastcounter: 'cameraBasler_fast_counter'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave1: 'mw_source_smb100B'
            microwave2: 'mw_source_srssg'
    
    magnetlogic:
        module.Class: 'magnet_vector_logic_Standalone.MagnetLogic'
        connect:
            magnetstage: 'aps_magnet'
            counterlogic: 'counterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laserdummy'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            hardware: 'cameraBasler'
            savelogic: 'savelogic'

    widefieldmeasurementlogic:
        module.Class: 'widefield_measurement_logic.WidefieldMeasurementLogic'
        connect:
            widefieldcamera: 'cameraBasler'
            microwave1: 'mw_source_smb100B'
            microwave2: 'mw_source_srssg'
            sequencegeneratorlogic: 'sequencegeneratorlogic'
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
            pulser: 'pulsestreamer'


        # TODO these should eventually be removed from here
        scanmode: 'LIST' # MW scan mode used for ODMR
        # mw_trigger_mode : 'SINGLE' # for triggering camera using MW output

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    qafm_gui:
        module.Class: 'qafm.qafm_gui.ProteusQGUI'
        connect:
            qafmlogic: 'afm_scanner_logic'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'
    
    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'
    
    magnet:
        module.Class: 'magnet.magnet_vector_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnetlogic'
            savelogic: 'savelogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'

    camera_odmr_gui:
        module.Class: 'odmr.camera_odmr_gui.WidefieldGUI'
        connect:
            camera_logic: 'camera_logic'
            widefieldlogic1: 'widefieldmeasurementlogic'
            savelogic: 'savelogic'